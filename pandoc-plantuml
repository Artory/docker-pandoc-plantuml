#!/usr/bin/env runhaskell
import Text.Pandoc.Builder (text, toList)
import Text.Pandoc.JSON
import Data.ByteString.Lazy (hGetContents, hPut)
import Data.ByteString.Lazy.UTF8 (fromString)
import Data.Char (toLower)
import Data.Digest.Pure.SHA (sha1, showDigest)
import Data.List (partition)
import System.Info(os)
import System.IO (hClose, hPutStr, IOMode(..), openBinaryFile, openFile, stderr)
import System.Process
import System.IO.Unsafe

-- | Selected output format
data ImgType = PNG | EPS | SVG


processBlocks :: Block -> IO Block
processBlocks b@(CodeBlock (id, classes, keyvals) content) =
  if "plantuml" `elem` classes
  then let (directives, attrs) = partition isProcessAttr keyvals
           classes' = filter (/= "plantuml") classes
           label    = if null id
                      then Space
                      else RawInline (Format "tex") ("\\label{" ++ id ++ "}")
           caption  = case lookup "caption" directives of
                        Just c -> toList (text c) ++ [label]
                        Nothing -> [Space]
           content' = case lookup "include" directives of
                        Just c -> unsafePerformIO . readFile $ c
                        Nothing -> content
           img_typ  = case lookup "format" directives of
                        Just f  -> case map toLower f of
                                     "eps" -> EPS
                                     "png" -> PNG
                                     _     -> SVG
                        Nothing -> SVG in
           do
             hPutStr stderr content'
             path <- renderImage img_typ content'
             return $ Para [Image (id, classes, attrs) caption (path, "fig:")]
  else return b
processBlocks b = return b

-- | Return True if a particular key requires special processing by the PlantUML
-- | filter.
isProcessAttr :: (String, String) -> Bool
isProcessAttr (k, _) = k `elem` ["caption", "format", "include"]

-- | Render the a PlantUML image in the requested format to a given filename.
renderImage :: ImgType -> String -> IO String
renderImage typ content = do
  let ft = case typ of
               PNG -> "png"
               EPS -> "eps"
               SVG -> "svg"
      path  = uniqueName content ++ "." ++ ft
      exec  = if os == "mingw32"
              then renderImageWindows
              else renderImageUnix
  exec ft content

-- | Render an image on Unix targets - in this case we can rely on pipe semantics
-- | when we write to the PlantUML script.
renderImageUnix :: String -> String -> IO String
renderImageUnix ft content = do
  let path = uniqueName content ++ "." ++ ft
  (Just hIn, Just hOut, _, _) <- createProcess (proc "plantuml" ["-pipe", "-t" ++ ft]) { std_in = CreatePipe, std_out = CreatePipe }
  hPutStr hIn content
  hClose hIn
  writeImageFile hOut path
  return path

-- | Render an image on Windows targets. It is almost impossible to reliably pipe
-- | arbitrary content to a Windows batch file, so we generate an intermediate
-- | file containing the UML.
-- | TODO: Path to PlantUML.jar is hardcoded. FInd a way to fix this.
renderImageWindows :: String -> String -> IO String
renderImageWindows ft content = do
  let name  = uniqueName content
      opath = name ++ "." ++ ft
      ipath = name ++ ".uml"
  hUml <- openFile ipath WriteMode
  hPutStr hUml content
  hClose hUml
  (_, Just hOut, _, _) <- createProcess (proc "java.exe" ["-jar", "c:\\bin\\plantuml.jar", ipath, "-t" ++ ft]) { std_out = CreatePipe }
  writeImageFile hOut opath
  return opath

-- | Read the contents of hPipe and write them as a binary file to path
writeImageFile hPipe path = do
  hPng <- openBinaryFile path WriteMode
  img <- hGetContents hPipe
  hPut hPng img
  hClose hPng

-- | Generate a unique name for the generated image. Here we use the SHA1 hash
-- | of the content as a sufficiently unique name.
uniqueName :: String -> String
uniqueName = showDigest . sha1 . fromString

main :: IO ()
main = toJSONFilter processBlocks
